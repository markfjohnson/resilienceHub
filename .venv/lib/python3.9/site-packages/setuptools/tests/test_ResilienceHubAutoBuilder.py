from unittest import TestCase
from ResilienceHubAutoBldr import ResilienceHubAutoBuilder




class TestResilienceHubAutoBuilder(TestCase):

    def tearDown(self):
        pass
    #TODO Add policy, resource_group, and App deletion logic


    def test_create_resource_group(self):
        app_name = "Blue-Test"
        r = ResilienceHubAutoBuilder.ResilienceHubAutoBuilder()
        rg = r.createResourceGroup(app_name, "Product", "Blue")
        r.deleteResourceGroup(app_name)
        self.assertEquals(rg['Name'],"Blue-Test")


    def test_get_policy_name(self):
        policy_name="resiliencyPolicy"
        r = ResilienceHubAutoBuilder.ResilienceHubAutoBuilder()
        result = r.getPolicy(policy_name=policy_name)
        self.assertNotEqual(result, None)
        self.assertEquals(result['policyName'],policy_name, f"Found policy {result['policyName']} ")

    def test_get_policy_name_Not_Found(self):
        policy_name = "resiliency"
        r = ResilienceHubAutoBuilder.ResilienceHubAutoBuilder()
        result = r.getPolicy(policy_name=policy_name)
        self.assertNotEqual(result, None)
        self.assertEquals(len(result), 0)

    def test_create_app(self):
        #TODO Validate that the resources are correctly assigned
        app_name="Blue-Test12"
        res_group_name="Blue-Test"
        tag="Blue"
        policy_name="resiliencyPolicy"
        r = ResilienceHubAutoBuilder.ResilienceHubAutoBuilder()
        app = r.createApp(app_name=app_name,res_group_name=res_group_name,policy_name=policy_name,tagKey="Product",tagValue=tag)
        print(app)
        #resource_members = r.getResourceGroupMembers(res_group_name)
  #      r.deleteApp(app_name)
        self.assertNotEqual(app, None)
        self.assertEqual(app['status'],"Active")
        self.assertEqual(app['complianceStatus'], 'NotAssessed')
 #       self.assertEqual(4, len(resource_members), "Resource member count incorrect")



    def test_delete_app(self):
        #TODO Create a bug submission regarding the force delete not always deleting
        r = ResilienceHubAutoBuilder.ResilienceHubAutoBuilder()
        app_name="Blue-Test3"
        response = r.deleteApp(app_name)
        self.assertEqual(200, response['ResponseMetadata']['HTTPStatusCode'],f"Status={response['ResponseMetadata']['HTTPStatusCode']}")

    def test_getResourceGroupMembers(self):
        r = ResilienceHubAutoBuilder.ResilienceHubAutoBuilder()
        app_name="Blue-Test"

        res_members = r.getResourceGroupMembers(app_name)
        assert len(res_members) == 13

    def test_publish_app(self):
        self.fail()

    def test_assess_app(self):
        self.fail()
